DynamoDB table with several columns, including:

pk (String): This appears to be the partition key, which is a date format (e.g., "2025-06-24").
file_type: This column contains strings representing the type of file, such as "Sovereign" or "Non-Sovereign".
Metadata: This column seems to contain JSON-like data, possibly with details about the file.
ObjectKey: This column contains identifiers for the objects, likely unique keys.
Status: This column indicates the current status of the file, such as "Manual Review" or "Redacted".
StatusMessage: This column provides additional information about the status, such as "File uploaded in ..." or "Successfully redacted".

To filter the content of this table based on pk, file_type, and Status, you can use Python with the AWS SDK for Python (Boto3). Below is an example code snippet that demonstrates how to query the table:
#################################################
Attributes

pk (Partition key): The value is 2025-02-12. This is likely used to uniquely identify items within the table.
jobid (Sort key): The value is jr_0056afbe-15b1-4cd9-9389-24c2ab1f3026. This is used in conjunction with the partition key to uniquely identify items.
ObjectKey: json
Status: The value is Error, suggesting there was an issue with the process or operation related to this item.
StatusMessage: The value is HITL_Review-Unknown file extension, indicating that the error might be related to a file with an unrecognized extension requiring human-in-the-loop (HITL) review.


{
  "pk": {
    "S": "2025-06-24"
  },
  "jobid": {
    "S": "jr_402edbbd-8410-42d1-8de9-da797dab8d0c"
  },
  "file_type": {
    "S": "\"Non-Sovereign File\""
  },
  "Metadata": {
    "S": "{\"file_name\": \"T000000001860101V0000R000009700215758P00102D000000001860101UCC_BEST_OriginalFilingNonRedacted_1860101.PDF\", \"partition_key\": \"2025-06-24\", \"sort_key\": \"jr_402edbbd-8410-42d1-8de9-da797dab8d0c\", \"pages\": [{\"1\": [{\"text\": \"451-52-6109\", \"Entity Type\": \"Social Security Number\", \"bbox\": [97, 612, 215, 628], \"textract_confidence_score\": 99.85, \"status\": \"redacted\"}]}]}"
  },
  "ObjectKey": {
    "S": "T000000001860101V0000R000009700215758P00102D000000001860101UCC_BEST_OriginalFilingNonRedacted_1860101.PDF"
  },
  "Status": {
    "S": "Redacted"
  },
  "StatusMessage": {
    "S": "Succesfully redacted and saved in S3"
  }
}
######################
File Name, File Name No .PDF, Redacted Text, Redacted Type, BBox, Textract Confidence Score
######################
Python Script Overview
Below is a script that:

Connects to DynamoDB using access_key / secret_key

Scans the table

Parses the ObjectKey field (which is a JSON string)

Extracts key fields

Exports the result to Excel using pandas
######################
working with DynamoDB low-level response format, where each field includes its type ("S" for string, etc.).

The ObjectKey value is a JSON string nested inside a "S" key, so you must:

Access each attribute via .get("S")

Use json.loads() on ObjectKey['S']
######################


import os
import boto3
import json
import pandas as pd
import csv

script_dir = os.path.dirname(os.path.abspath(__file__))
config_path = os.path.join(script_dir, 'config_local_run.json')

# --- Load Config ---
with open(config_path, 'r') as f:
    config = json.load(f)

    
# --- Extract AWS config ---

access_key = config['aws']['access_key']
secret_key = config['aws']['secret_key']
region = config['aws']['region']
services_config = config['services']




# --- Connect to DynamoDB ---
dynamodb_resource = boto3.resource('dynamodb', aws_access_key_id=access_key, aws_secret_access_key=secret_key, region_name=region)
dynamodb_client = boto3.client('dynamodb', aws_access_key_id=access_key, aws_secret_access_key=secret_key, region_name=region)
# Access the DynamoDB table name
table_name = config['services']['dynamodb']['Metadata_Table_Name']


# Parameters
TABLE_NAME = table_name
TARGET_PK = '2025-06-24'
VALID_STATUSES = ['Redacted']
VALID_TYPES = ['Sovereign', 'Non-Sovereign File']

# Output CSV file
CSV_FILE = 'redacted_files_output.csv'

def extract_metadata(item):
    metadata_str = item.get('Metadata', {}).get('S', '{}')
    return json.loads(metadata_str)

def process_item(item):
    metadata = extract_metadata(item)
    file_name = metadata.get('file_name', '')
    file_name_no_pdf = file_name.replace('.PDF', '')

    file_type = item.get('file_type', {}).get('S', '').strip('"')

    if file_type == 'Sovereign':
        return [{
            'File Name': file_name,
            'File Name No .PDF': file_name_no_pdf,
            'Redacted Text': 'Sovereign',
            'Redacted Type': 'Sovereign',
            'BBox': 'Sovereign',
            'Textract Confidence Score': 0
        }]
    
    elif file_type == 'Non-Sovereign File':
        pages = metadata.get('pages', [])
        results = []
        for page in pages:
            for _, entities in page.items():
                for ent in entities:
                    results.append({
                        'File Name': file_name,
                        'File Name No .PDF': file_name_no_pdf,
                        'Redacted Text': ent.get('text', ''),
                        'Redacted Type': ent.get('Entity Type', ''),
                        'BBox': ent.get('bbox', ''),
                        'Textract Confidence Score': ent.get('textract_confidence_score', 0)
                    })
        return results

    return []

def query_and_export():
    paginator = dynamodb_client.get_paginator('scan')

    with open(CSV_FILE, mode='w', newline='') as csvfile:
        fieldnames = ['File Name', 'File Name No .PDF', 'Redacted Text', 'Redacted Type', 'BBox', 'Textract Confidence Score']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for page in paginator.paginate(
            TableName=TABLE_NAME,
            FilterExpression='pk = :pkval AND #ft IN (:sovereign, :nsovereign) AND #st IN (:status)',
            ExpressionAttributeValues={
                ':pkval': {'S': TARGET_PK},
                ':sovereign': {'S': 'Sovereign'},
                ':nsovereign': {'S': '\"Non-Sovereign File\"'},
                ':status': {'S': 'Redacted'}
            },
            ExpressionAttributeNames={
                '#ft': 'file_type',
                '#st': 'Status'
            }
        ):
            for item in page.get('Items', []):
                for row in process_item(item):
                    writer.writerow(row)

    print(f"CSV Export Complete: {CSV_FILE}")
# Define full CSV path relative to script directory
CSV_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'redacted_files_output.csv')

if __name__ == "__main__":
    query_and_export()

#####################################################################################

for page in paginator.paginate(
    TableName=TABLE_NAME,
    FilterExpression='#ft IN (:sovereign, :nsovereign) AND #st = :status',
    ExpressionAttributeValues={
        ':sovereign': {'S': 'Sovereign'},
        ':nsovereign': {'S': 'Non-Sovereign File'},
        ':status': {'S': 'Redacted'}
    },
    ExpressionAttributeNames={
        '#ft': 'file_type',
        '#st': 'Status'
    }
):



