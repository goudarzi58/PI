DynamoDB table with several columns, including:

pk (String): This appears to be the partition key, which is a date format (e.g., "2025-06-24").
file_type: This column contains strings representing the type of file, such as "Sovereign" or "Non-Sovereign".
Metadata: This column seems to contain JSON-like data, possibly with details about the file.
ObjectKey: This column contains identifiers for the objects, likely unique keys.
Status: This column indicates the current status of the file, such as "Manual Review" or "Redacted".
StatusMessage: This column provides additional information about the status, such as "File uploaded in ..." or "Successfully redacted".

To filter the content of this table based on pk, file_type, and Status, you can use Python with the AWS SDK for Python (Boto3). Below is an example code snippet that demonstrates how to query the table:
#################################################
Attributes

pk (Partition key): The value is 2025-02-12. This is likely used to uniquely identify items within the table.
jobid (Sort key): The value is jr_0056afbe-15b1-4cd9-9389-24c2ab1f3026. This is used in conjunction with the partition key to uniquely identify items.
ObjectKey: json
Status: The value is Error, suggesting there was an issue with the process or operation related to this item.
StatusMessage: The value is HITL_Review-Unknown file extension, indicating that the error might be related to a file with an unrecognized extension requiring human-in-the-loop (HITL) review.


{
  "pk": {
    "S": "2025-06-24"
  },
  "jobid": {
    "S": "jr_402edbbd-8410-42d1-8de9-da797dab8d0c"
  },
  "file_type": {
    "S": "\"Non-Sovereign File\""
  },
  "Metadata": {
    "S": "{\"file_name\": \"T000000001860101V0000R000009700215758P00102D000000001860101UCC_BEST_OriginalFilingNonRedacted_1860101.PDF\", \"partition_key\": \"2025-06-24\", \"sort_key\": \"jr_402edbbd-8410-42d1-8de9-da797dab8d0c\", \"pages\": [{\"1\": [{\"text\": \"451-52-6109\", \"Entity Type\": \"Social Security Number\", \"bbox\": [97, 612, 215, 628], \"textract_confidence_score\": 99.85, \"status\": \"redacted\"}]}]}"
  },
  "ObjectKey": {
    "S": "T000000001860101V0000R000009700215758P00102D000000001860101UCC_BEST_OriginalFilingNonRedacted_1860101.PDF"
  },
  "Status": {
    "S": "Redacted"
  },
  "StatusMessage": {
    "S": "Succesfully redacted and saved in S3"
  }
}
######################
File Name, File Name No .PDF, Redacted Text, Redacted Type, BBox, Textract Confidence Score
######################
Python Script Overview
Below is a script that:

Connects to DynamoDB using access_key / secret_key

Scans the table

Parses the ObjectKey field (which is a JSON string)

Extracts key fields

Exports the result to Excel using pandas
######################
working with DynamoDB low-level response format, where each field includes its type ("S" for string, etc.).

The ObjectKey value is a JSON string nested inside a "S" key, so you must:

Access each attribute via .get("S")

Use json.loads() on ObjectKey['S']
######################

