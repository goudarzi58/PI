

Attributes

pk (Partition key): The value is 2025-02-12. This is likely used to uniquely identify items within the table.
jobid (Sort key): The value is jr_0056afbe-15b1-4cd9-9389-24c2ab1f3026. This is used in conjunction with the partition key to uniquely identify items.
ObjectKey: json
Status: The value is Error, suggesting there was an issue with the process or operation related to this item.
StatusMessage: The value is HITL_Review-Unknown file extension, indicating that the error might be related to a file with an unrecognized extension requiring human-in-the-loop (HITL) review.


ObjectKey: json view
  "pk": {
    "S": "2025-02-12"
  },
  "jobid": {
    "S": "jr_0056afbe-15b1-4cd9-9389-24c2ab1f3026"
  },
  "ObjectKey": {
    "S": "{\"Records\":[{\"eventVersion\":\"2.1\",\"eventSource\":\"aws:s3\",\"awsRegion\":\"us-east-1\",\"eventTime\":\"2025-02-12T16:25:57.781Z\",\"eventName\":\"ObjectCreated:Put\",\"userIdentity\":{\"principalId\":\"AWS:AROASK5MCOA6UHGFVQXBV:bhyalamarthi@deloitte.com\"},\"requestParameters\":{\"sourceIPAddress\":\"136.226.12.212\"},\"responseElements\":{\"x-amz-request-id\":\"SPAA4BYG5AAHA81N\",\"x-amz-id-2\":\"guogulk71T1AfEjCgLGFH7j89NIntkxC+3wpYVwF705DQ3zWs4AnD2oEacWKiIU4FAEmQ8GkpANIqUa9y1iwtsUkRcr8lXA4\"},\"s3\":{\"s3SchemaVersion\":\"1.0\",\"configurationId\":\"LoadToQueue\",\"bucket\":{\"name\":\"sos-appian-dev-pii-redaction-rawpdfs-a3c2f4\",\"ownerIdentity\":{\"principalId\":\"A1N8VUOKXDPXES\"},\"arn\":\"arn:aws:s3:::sos-appian-dev-pii-redaction-rawpdfs-a3c2f4\"},\"object\":{\"key\":\"UCC/421386190004.pdf\",\"size\":219531,\"eTag\":\"8a3eb6897a0841287eda41d374e43e0b\",\"sequencer\":\"0067ACCB959992FC61\"}}}]}"
  },
  "Status": {
    "S": "Error"
  },
  "StatusMessage": {
    "S": "HITL_Review-Unknown file extension"
  }
}
######################
Python Script Overview
Below is a script that:

Connects to DynamoDB using access_key / secret_key

Scans the table

Parses the ObjectKey field (which is a JSON string)

Extracts key fields

Exports the result to Excel using pandas
######################
working with DynamoDB low-level response format, where each field includes its type ("S" for string, etc.).

The ObjectKey value is a JSON string nested inside a "S" key, so you must:

Access each attribute via .get("S")

Use json.loads() on ObjectKey['S']
######################

import boto3
import json
import pandas as pd

# AWS Credentials and Config
access_key = 'YOUR_ACCESS_KEY'
secret_key = 'YOUR_SECRET_KEY'
region_name = 'us-east-1'
table_name = 'YourDynamoDBTableName'

# Initialize DynamoDB client
dynamodb = boto3.client(
    'dynamodb',
    aws_access_key_id=access_key,
    aws_secret_access_key=secret_key,
    region_name=region_name
)

# Scan the table
response = dynamodb.scan(TableName=table_name)
items = response.get('Items', [])

# Store parsed data
parsed_records = []

for item in items:
    try:
        # Extract values from low-level format
        pk = item.get('pk', {}).get('S')
        jobid = item.get('jobid', {}).get('S')
        status = item.get('Status', {}).get('S')
        status_message = item.get('StatusMessage', {}).get('S')
        object_key_str = item.get('ObjectKey', {}).get('S')

        # Parse ObjectKey JSON
        object_key_json = json.loads(object_key_str)

        for record in object_key_json.get('Records', []):
            s3_info = record.get('s3', {})
            parsed_records.append({
                'pk': pk,
                'jobid': jobid,
                'Status': status,
                'StatusMessage': status_message,
                'eventTime': record.get('eventTime'),
                'eventName': record.get('eventName'),
                'bucketName': s3_info.get('bucket', {}).get('name'),
                'objectKey': s3_info.get('object', {}).get('key'),
                'objectSize': s3_info.get('object', {}).get('size'),
                'user': record.get('userIdentity', {}).get('principalId'),
                'sourceIP': record.get('requestParameters', {}).get('sourceIPAddress')
            })

    except Exception as e:
        print(f"Error parsing item with jobid={item.get('jobid', {}).get('S')}: {e}")

# Export to Excel
df = pd.DataFrame(parsed_records)
output_file = 'dynamodb_parsed_records.xlsx'
df.to_excel(output_file, index=False)

print(f"Excel created: {output_file}")
