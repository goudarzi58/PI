with open("./folder/file.csv", "r", encoding="utf-8-sig") as f:
    reader = csv.reader(f)
    # imho you are creating a data structure, the file was its (original) source
    # so don't name it 'file' anymore
    data = [[c.replace('\ufeff', '') for c in row] for row in reader]
 
yes , for e.g. key = 'T000000000449534V0000R000007400006611P00102D000000000449534UCC_BEST_OriginalFiling_449534.PDF' should be read from queue instead it is reading it as 
key = '/ufeffT000000000449534V0000R000007400006611P00102D000000000449534UCC_BEST_OriginalFiling_449534.PDF'


 
#################


import os
import io
import json
from pydoc import text
import uuid
import boto3
from pathlib import Path
from datetime import datetime
from botocore.exceptions import ClientError



# ---------- #####  ---------

#--local-
import warnings
warnings.filterwarnings('ignore')
import os
print("Current working directory:", os.getcwd())

# ---------- #####  ---------
script_dir = os.path.dirname(os.path.abspath(__file__))
config_path = os.path.join(script_dir, 'config_local_run.json')

with open(config_path, 'r') as f:
    config = json.load(f)


# --- Extract AWS config ---
aws_config = config['aws']
access_key = aws_config['access_key']
secret_key = aws_config['secret_key']
REGION = aws_config['region']
services_config = config['services']

#--prod--
aws_config_prod = config['aws_prod']
access_key_prod = aws_config_prod['access_key_prod']
secret_key_prod = aws_config_prod['secret_key_prod']
REGION_prod = aws_config_prod['region_prod']


# --- S3 Buckets ---
#s3_source_bucket = services_config['s3']['source_bucket_name']
s3_redacted_bucket = services_config['s3']['redacted_bucket_name']
s3_manual_review_bucket = services_config['s3']['manual_review_bucket']
 
#--prod--
s3_source_bucket_prod = services_config['s3_prod']['source_bucket_name_prod']
  
# --- SQS Queue Detail ---
sqs_queue_url = services_config['sqs']['HITLReview_Queue']['Queue_URL']
sqs_batch_size = services_config['sqs']['HITLReview_Queue']['Batch_Size']


# <<<<<<<  AWS Initialization with Exception Handling >>>>>>>
try:

    sqs = boto3.client('sqs', aws_access_key_id=access_key, aws_secret_access_key=secret_key, region_name=REGION, verify=False)

except Exception as e:
    logging.critical("Failed to initialize AWS clients", exc_info=True)
    raise SystemExit("Terminating due to AWS initialization error.")
 

# ---------- #####  ---------

 
# Global Variables
metadata_json = {}



# ---------- SQS Read/Delete Utilities ----------

def read_message_from_queue(queueUrl, msg_count):
    print(f"\nReading messages from SQS Queue: {queueUrl}")
    messages = []
    try:
        response = sqs.receive_message(
            QueueUrl = queueUrl,
            MaxNumberOfMessages = msg_count,
            WaitTimeSeconds = 10
        )

        if 'Messages' in response:
            for message in response['Messages']:
                messages.append({
                    'Body': message['Body'],
                    'ReceiptHandle': message['ReceiptHandle']
                })
            return messages
        return None
    except ClientError as e:
        print(f"Error reading from SQS Queue: {e}")
        raise
    
# ---------- BOM Cleaning Utility ----------
def clean_object_key(object_key):
    if not object_key.startswith('T'):
        print(f" Unexpected prefix detected in file name: {repr(object_key)}")
        cleaned_key = object_key.replace('\uFEFF', '')
        if cleaned_key.startswith('T'):
            print(f" Cleaned file name: {cleaned_key}")
            return cleaned_key
        else:
            print(" Cleaning did not restore expected prefix. Manual inspection needed.")
            return object_key  # fallback
    return object_key

# ---------- Main Processing ----------
def process_messages():
    messages = read_message_from_queue(sqs_queue_url, sqs_batch_size)

    if not messages:
        print(" No messages to process.")
        return

    for msg in messages:
        try:
            body = json.loads(msg['Body'])

            # Clean if needed
            cleaned_key = clean_object_key(body)


        except Exception as e:
            print(f" Error processing message: {e}")
            continue

# ---------- Entry ----------
if __name__ == "__main__":
    process_messages()

################################

Current working directory: C:\Users\ABGOUDARZI

Reading messages from SQS Queue: https://sqs.us-east-1.amazonaws.com/160885272637/sos-appian-dev-pii-redaction-rawpdfs-w2j2r4
 Error processing message: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
 Error processing message: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
PS C:\Users\ABGOUDARZI> 
